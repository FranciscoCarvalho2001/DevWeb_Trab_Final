// <auto-generated />
using System;
using DevWeb_Trab_Final.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DevWeb_Trab_Final.Migrations
{
    [DbContext(typeof(DevWeb_Trab_FinalContext))]
    [Migration("20230709184052_TesteInserirTabelasFinal")]
    partial class TesteInserirTabelasFinal
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DevWeb_Trab_Final.Data.DevWeb_Trab_Final_User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataRegisto")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NomeUtilizador")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b04f78f6-e679-4a65-bb9d-32ba115a0468",
                            DataRegisto = new DateTime(2023, 7, 9, 19, 40, 52, 114, DateTimeKind.Local).AddTicks(6948),
                            Email = "administrador@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NomeUtilizador = "Administrador",
                            NormalizedEmail = "ADMINISTRADOR@GMAIL.COM",
                            NormalizedUserName = "ADMINISTRADOR@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFgsQim7Bdb+j5EW7pSGvz5tehCd7KEDXoHV+5E9F7pt5hKKVlvhK++ZkOQp1fKKIg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a2f594f7-d738-48a3-8de1-8b9a6fd743ef",
                            TwoFactorEnabled = false,
                            UserName = "administrador@gmail.com"
                        });
                });

            modelBuilder.Entity("DevWeb_Trab_Final.Models.Clientes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CodPostal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Morada")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NIF")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telemovel")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clientes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CodPostal = "2500-654 PORTIMÃO",
                            Email = "alberto@hotmail.com",
                            Morada = "Bairo Rui Lopes",
                            NIF = 249249249,
                            Nome = "Alberto Santos",
                            Telemovel = "969777666",
                            UserId = ""
                        },
                        new
                        {
                            Id = 2,
                            CodPostal = "2678-283 LISBOA",
                            Email = "maria.joao@hotmail.com",
                            Morada = "Canto da Cerejeiras",
                            NIF = 256249999,
                            Nome = "Maria João",
                            Telemovel = "933751916",
                            UserId = ""
                        },
                        new
                        {
                            Id = 3,
                            CodPostal = "1672-123 AVEIRO",
                            Email = "catarina@hotmail.com",
                            Morada = "Rua Salvador Sobral",
                            NIF = 189234831,
                            Nome = "Catarina Moedas",
                            Telemovel = "919744531",
                            UserId = ""
                        },
                        new
                        {
                            Id = 4,
                            CodPostal = "3111-879 CASAIS",
                            Email = "gustavo_pal@hotmail.com",
                            Morada = "Placeta dos Santos Simões",
                            NIF = 222738901,
                            Nome = "Gustavo Palhinha",
                            Telemovel = "923321348",
                            UserId = ""
                        });
                });

            modelBuilder.Entity("DevWeb_Trab_Final.Models.Dispositivos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClienteFK")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataReg")
                        .HasColumnType("datetime2");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClienteFK");

                    b.ToTable("Dispositivos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClienteFK = 1,
                            DataReg = new DateTime(2023, 2, 13, 14, 10, 48, 435, DateTimeKind.Local).AddTicks(8516),
                            Estado = "Ecrã Partido",
                            Modelo = "Asus",
                            Tipo = "PC-Alberto"
                        },
                        new
                        {
                            Id = 2,
                            ClienteFK = 2,
                            DataReg = new DateTime(2023, 5, 9, 18, 10, 14, 435, DateTimeKind.Local).AddTicks(8516),
                            Estado = "Não liga",
                            Modelo = "Samsung",
                            Tipo = "MicroOndas-Maria"
                        },
                        new
                        {
                            Id = 3,
                            ClienteFK = 2,
                            DataReg = new DateTime(2023, 7, 9, 19, 40, 51, 978, DateTimeKind.Local).AddTicks(4744),
                            Estado = "Não faz chamadas",
                            Modelo = "Xiaomi",
                            Tipo = "Telemovel-Maria"
                        },
                        new
                        {
                            Id = 4,
                            ClienteFK = 3,
                            DataReg = new DateTime(2023, 6, 23, 12, 50, 22, 435, DateTimeKind.Local).AddTicks(8516),
                            Estado = "Tem virus",
                            Modelo = "Apple",
                            Tipo = "Tablet-Catarina"
                        },
                        new
                        {
                            Id = 5,
                            ClienteFK = 4,
                            DataReg = new DateTime(2023, 3, 30, 9, 35, 34, 435, DateTimeKind.Local).AddTicks(8516),
                            Estado = "Não deixa mudar as horas",
                            Modelo = "Sony",
                            Tipo = "Relogio-Gustavo"
                        },
                        new
                        {
                            Id = 6,
                            ClienteFK = 4,
                            DataReg = new DateTime(2023, 7, 9, 14, 55, 44, 435, DateTimeKind.Local).AddTicks(8516),
                            Estado = "Bateria quase a rebentar",
                            Modelo = "HP",
                            Tipo = "Portatil-Gustavo"
                        },
                        new
                        {
                            Id = 7,
                            ClienteFK = 1,
                            DataReg = new DateTime(2023, 4, 4, 10, 20, 33, 435, DateTimeKind.Local).AddTicks(8516),
                            Estado = "Não vira",
                            Modelo = "Wahson",
                            Tipo = "Ventoinha-Alberto"
                        });
                });

            modelBuilder.Entity("DevWeb_Trab_Final.Models.Fotografias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DispositivoFK")
                        .HasColumnType("int");

                    b.Property<string>("NomeFoto")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DispositivoFK");

                    b.ToTable("Fotografias");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DispositivoFK = 1,
                            NomeFoto = "noDispositivo.png"
                        },
                        new
                        {
                            Id = 2,
                            DispositivoFK = 2,
                            NomeFoto = "noDispositivo.png"
                        },
                        new
                        {
                            Id = 3,
                            DispositivoFK = 3,
                            NomeFoto = "noDispositivo.png"
                        },
                        new
                        {
                            Id = 4,
                            DispositivoFK = 4,
                            NomeFoto = "noDispositivo.png"
                        },
                        new
                        {
                            Id = 5,
                            DispositivoFK = 5,
                            NomeFoto = "noDispositivo.png"
                        },
                        new
                        {
                            Id = 6,
                            DispositivoFK = 6,
                            NomeFoto = "noDispositivo.png"
                        },
                        new
                        {
                            Id = 7,
                            DispositivoFK = 7,
                            NomeFoto = "noDispositivo.png"
                        });
                });

            modelBuilder.Entity("DevWeb_Trab_Final.Models.Funcionarios", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CodPostal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Especializacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Morada")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telemovel")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Funcionarios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CodPostal = "2300-450 TRAMAGAL",
                            Email = "daniel@gmail.com",
                            Especializacao = "Computadores",
                            Morada = "Rua da Pedrada",
                            Nome = "Daniel Filipe",
                            Telemovel = "912123123",
                            UserId = ""
                        },
                        new
                        {
                            Id = 2,
                            CodPostal = "2305-670 ALBUFEIRA",
                            Email = "rodrigo@gmail.com",
                            Especializacao = "Computadores",
                            Morada = "Rua do Pinheiro",
                            Nome = "Rodrigo Antunes",
                            Telemovel = "915789789",
                            UserId = ""
                        },
                        new
                        {
                            Id = 3,
                            CodPostal = "2200-301 BRAGA",
                            Email = "leia.marques@gmail.com",
                            Especializacao = "Telemóveis",
                            Morada = "Avenida 31 de Outubro",
                            Nome = "Leia Marques",
                            Telemovel = "962231123",
                            UserId = ""
                        },
                        new
                        {
                            Id = 4,
                            CodPostal = "2731-659 BEJA",
                            Email = "carlos@gmail.com",
                            Especializacao = "Eletrodomésticos",
                            Morada = "Praça da Nogueira",
                            Nome = "Carlos Tomaz",
                            Telemovel = "932553923",
                            UserId = ""
                        },
                        new
                        {
                            Id = 5,
                            CodPostal = "3030-155 SAGRES",
                            Email = "tiago_varandas@gmail.com",
                            Especializacao = "Tablets",
                            Morada = "Praia de Lagos",
                            Nome = "Tiago Roberto Varandas",
                            Telemovel = "922456123",
                            UserId = ""
                        });
                });

            modelBuilder.Entity("DevWeb_Trab_Final.Models.Reparacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Custo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("DataFim")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("datetime2");

                    b.Property<int>("DispositivoFK")
                        .HasColumnType("int");

                    b.Property<int>("FuncionariosFK")
                        .HasColumnType("int");

                    b.Property<string>("Observacao")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("DispositivoFK");

                    b.HasIndex("FuncionariosFK");

                    b.ToTable("Reparacao");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Custo = 80.35m,
                            DataInicio = new DateTime(2023, 7, 9, 19, 40, 51, 978, DateTimeKind.Local).AddTicks(4898),
                            DispositivoFK = 1,
                            FuncionariosFK = 1,
                            Observacao = "É preciso comprar um ecrã novo"
                        },
                        new
                        {
                            Id = 2,
                            Custo = 50.43m,
                            DataInicio = new DateTime(2023, 5, 9, 18, 15, 44, 435, DateTimeKind.Local).AddTicks(8516),
                            DispositivoFK = 2,
                            FuncionariosFK = 2,
                            Observacao = "É preciso trocar a fonte de alimentação"
                        },
                        new
                        {
                            Id = 3,
                            Custo = 7.52m,
                            DataInicio = new DateTime(2023, 5, 10, 19, 55, 59, 435, DateTimeKind.Local).AddTicks(8516),
                            DispositivoFK = 2,
                            FuncionariosFK = 4,
                            Observacao = "É tambem preciso arranjar o cabo de alimentação"
                        },
                        new
                        {
                            Id = 4,
                            Custo = 10.67m,
                            DataInicio = new DateTime(2023, 7, 9, 19, 40, 51, 978, DateTimeKind.Local).AddTicks(5006),
                            DispositivoFK = 3,
                            FuncionariosFK = 4,
                            Observacao = "É preciso mudar a antena"
                        },
                        new
                        {
                            Id = 5,
                            Custo = 20.20m,
                            DataInicio = new DateTime(2023, 6, 24, 11, 28, 23, 435, DateTimeKind.Local).AddTicks(8516),
                            DispositivoFK = 4,
                            FuncionariosFK = 3,
                            Observacao = "Tentar meter um antivírus"
                        },
                        new
                        {
                            Id = 6,
                            Custo = 40.00m,
                            DataInicio = new DateTime(2023, 6, 25, 18, 48, 24, 435, DateTimeKind.Local).AddTicks(8516),
                            DispositivoFK = 4,
                            FuncionariosFK = 5,
                            Observacao = "É preciso formatar o tablet"
                        },
                        new
                        {
                            Id = 7,
                            Custo = 8.90m,
                            DataInicio = new DateTime(2023, 7, 11, 16, 30, 33, 435, DateTimeKind.Local).AddTicks(8516),
                            DispositivoFK = 5,
                            FuncionariosFK = 4,
                            Observacao = "É preciso mudar os botões"
                        },
                        new
                        {
                            Id = 8,
                            Custo = 50.77m,
                            DataInicio = new DateTime(2023, 7, 9, 15, 0, 12, 435, DateTimeKind.Local).AddTicks(8516),
                            DispositivoFK = 6,
                            FuncionariosFK = 3,
                            Observacao = "É preciso encomendar uma bateria nova"
                        },
                        new
                        {
                            Id = 9,
                            Custo = 10.00m,
                            DataFim = new DateTime(2023, 2, 17, 14, 30, 11, 435, DateTimeKind.Local).AddTicks(8516),
                            DataInicio = new DateTime(2023, 2, 15, 13, 45, 51, 435, DateTimeKind.Local).AddTicks(8516),
                            DispositivoFK = 1,
                            FuncionariosFK = 5,
                            Observacao = "Arranjado"
                        },
                        new
                        {
                            Id = 10,
                            Custo = 20.30m,
                            DataFim = new DateTime(2023, 7, 9, 19, 40, 51, 978, DateTimeKind.Local).AddTicks(5029),
                            DataInicio = new DateTime(2023, 7, 12, 14, 25, 20, 435, DateTimeKind.Local).AddTicks(8516),
                            DispositivoFK = 3,
                            FuncionariosFK = 5,
                            Observacao = "Arranjado"
                        },
                        new
                        {
                            Id = 11,
                            Custo = 60.78m,
                            DataFim = new DateTime(2023, 4, 1, 11, 33, 17, 435, DateTimeKind.Local).AddTicks(8516),
                            DataInicio = new DateTime(2023, 3, 30, 9, 50, 50, 435, DateTimeKind.Local).AddTicks(8516),
                            DispositivoFK = 5,
                            FuncionariosFK = 2,
                            Observacao = "Arranjado"
                        },
                        new
                        {
                            Id = 12,
                            Custo = 60.78m,
                            DataFim = new DateTime(2023, 4, 5, 17, 50, 25, 435, DateTimeKind.Local).AddTicks(8516),
                            DataInicio = new DateTime(2023, 4, 4, 10, 30, 34, 435, DateTimeKind.Local).AddTicks(8516),
                            DispositivoFK = 7,
                            FuncionariosFK = 4,
                            Observacao = "Arranjado"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a",
                            Name = "Administrador",
                            NormalizedName = "ADMINISTRADOR"
                        },
                        new
                        {
                            Id = "f",
                            Name = "Funcionario",
                            NormalizedName = "FUNCIONARIO"
                        },
                        new
                        {
                            Id = "c",
                            Name = "Cliente",
                            NormalizedName = "CLIENTE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "a"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DevWeb_Trab_Final.Models.Dispositivos", b =>
                {
                    b.HasOne("DevWeb_Trab_Final.Models.Clientes", "Cliente")
                        .WithMany("ListaDipositivos")
                        .HasForeignKey("ClienteFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("DevWeb_Trab_Final.Models.Fotografias", b =>
                {
                    b.HasOne("DevWeb_Trab_Final.Models.Dispositivos", "Dispositivo")
                        .WithMany("ListaFotografias")
                        .HasForeignKey("DispositivoFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dispositivo");
                });

            modelBuilder.Entity("DevWeb_Trab_Final.Models.Reparacao", b =>
                {
                    b.HasOne("DevWeb_Trab_Final.Models.Dispositivos", "Dispositivo")
                        .WithMany("ListaReparacao")
                        .HasForeignKey("DispositivoFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevWeb_Trab_Final.Models.Funcionarios", "Funcionarios")
                        .WithMany("ListaRepara")
                        .HasForeignKey("FuncionariosFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dispositivo");

                    b.Navigation("Funcionarios");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DevWeb_Trab_Final.Data.DevWeb_Trab_Final_User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DevWeb_Trab_Final.Data.DevWeb_Trab_Final_User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevWeb_Trab_Final.Data.DevWeb_Trab_Final_User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DevWeb_Trab_Final.Data.DevWeb_Trab_Final_User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevWeb_Trab_Final.Models.Clientes", b =>
                {
                    b.Navigation("ListaDipositivos");
                });

            modelBuilder.Entity("DevWeb_Trab_Final.Models.Dispositivos", b =>
                {
                    b.Navigation("ListaFotografias");

                    b.Navigation("ListaReparacao");
                });

            modelBuilder.Entity("DevWeb_Trab_Final.Models.Funcionarios", b =>
                {
                    b.Navigation("ListaRepara");
                });
#pragma warning restore 612, 618
        }
    }
}
