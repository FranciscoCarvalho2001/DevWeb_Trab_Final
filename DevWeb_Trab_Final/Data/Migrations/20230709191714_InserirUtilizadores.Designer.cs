// <auto-generated />
using System;
using DevWeb_Trab_Final.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DevWeb_Trab_Final.Migrations
{
    [DbContext(typeof(DevWeb_Trab_FinalContext))]
    [Migration("20230709191714_InserirUtilizadores")]
    partial class InserirUtilizadores
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DevWeb_Trab_Final.Data.DevWeb_Trab_Final_User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataRegisto")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NomeUtilizador")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "73fb5ff9-98ad-4e2c-ac03-dde010ca7960",
                            DataRegisto = new DateTime(2023, 1, 1, 9, 0, 0, 435, DateTimeKind.Local).AddTicks(8516),
                            Email = "administrador_1@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NomeUtilizador = "Administrador UM",
                            NormalizedEmail = "ADMINISTRADOR_1@GMAIL.COM",
                            NormalizedUserName = "ADMINISTRADOR_1@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELNkMdIrt7kMwhD7j07xYCyWPKlgaLBmuKVAPhMoirTkdtlHghML183wzI5u6NWEJQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5338480d-7100-479b-9a43-b985d5607f27",
                            TwoFactorEnabled = false,
                            UserName = "administrador_1@gmail.com"
                        },
                        new
                        {
                            Id = "a2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e4ea16e5-f4b1-4624-a271-4c24f909bf5f",
                            DataRegisto = new DateTime(2023, 1, 1, 9, 0, 0, 435, DateTimeKind.Local).AddTicks(8516),
                            Email = "administrador_2@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NomeUtilizador = "Administrador DOIS",
                            NormalizedEmail = "ADMINISTRADOR_2@GMAIL.COM",
                            NormalizedUserName = "ADMINISTRADOR_2@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELNkMdIrt7kMwhD7j07xYCyWPKlgaLBmuKVAPhMoirTkdtlHghML183wzI5u6NWEJQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "47ad0da2-65c2-45c6-828a-0d44f259c3d9",
                            TwoFactorEnabled = false,
                            UserName = "administrador_2@gmail.com"
                        },
                        new
                        {
                            Id = "f1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "27f4ca81-822e-440d-b7a8-4e8e2757b981",
                            DataRegisto = new DateTime(2023, 1, 20, 11, 0, 0, 435, DateTimeKind.Local).AddTicks(8516),
                            Email = "daniel@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NomeUtilizador = "Daniel Filipe",
                            NormalizedEmail = "DANIEL@GMAIL.COM",
                            NormalizedUserName = "DANIEL@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELNkMdIrt7kMwhD7j07xYCyWPKlgaLBmuKVAPhMoirTkdtlHghML183wzI5u6NWEJQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "74ecf326-a044-4099-b6d6-ae52cc3d64d0",
                            TwoFactorEnabled = false,
                            UserName = "daniel@gmail.com"
                        },
                        new
                        {
                            Id = "f2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8fe002cf-28a9-4fc9-9b4a-72e2fdce7ecd",
                            DataRegisto = new DateTime(2023, 1, 15, 14, 20, 0, 435, DateTimeKind.Local).AddTicks(8516),
                            Email = "rodrigo@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NomeUtilizador = "Rodrigo Antunes",
                            NormalizedEmail = "RODRIGO@GMAIL.COM",
                            NormalizedUserName = "RODRIGO@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELNkMdIrt7kMwhD7j07xYCyWPKlgaLBmuKVAPhMoirTkdtlHghML183wzI5u6NWEJQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "00c8fdc8-eb46-4ba7-a98c-8d5ec8c33a7b",
                            TwoFactorEnabled = false,
                            UserName = "rodrigo@gmail.com"
                        },
                        new
                        {
                            Id = "f3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "caa30bbf-6f4b-4019-9a37-67527cca2925",
                            DataRegisto = new DateTime(2023, 1, 29, 16, 0, 0, 435, DateTimeKind.Local).AddTicks(8516),
                            Email = "leia.marques@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NomeUtilizador = "Leia Marques",
                            NormalizedEmail = "LEIA.MARQUES@GMAIL.COM",
                            NormalizedUserName = "LEIA.MARQUES@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELNkMdIrt7kMwhD7j07xYCyWPKlgaLBmuKVAPhMoirTkdtlHghML183wzI5u6NWEJQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6338c94e-2e09-467f-a015-e4e38c2648d5",
                            TwoFactorEnabled = false,
                            UserName = "leia.marques@gmail.com"
                        },
                        new
                        {
                            Id = "f4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0fb44d03-d84b-4282-8e7f-ea7e520d2aaa",
                            DataRegisto = new DateTime(2023, 2, 2, 12, 15, 0, 435, DateTimeKind.Local).AddTicks(8516),
                            Email = "carlos@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NomeUtilizador = "Carlos Tomaz",
                            NormalizedEmail = "CARLOS@GMAIL.COM",
                            NormalizedUserName = "CARLOS@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELNkMdIrt7kMwhD7j07xYCyWPKlgaLBmuKVAPhMoirTkdtlHghML183wzI5u6NWEJQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "963635cd-9889-4f7e-8c20-5b41b97edc12",
                            TwoFactorEnabled = false,
                            UserName = "carlos@gmail.com"
                        },
                        new
                        {
                            Id = "f5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0f8734c7-5fa4-42a8-8373-51e3a6945925",
                            DataRegisto = new DateTime(2023, 2, 18, 11, 50, 0, 435, DateTimeKind.Local).AddTicks(8516),
                            Email = "tiago_varandas@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NomeUtilizador = "Tiago Roberto Varandas",
                            NormalizedEmail = "TIAGO_VARANDAS@GMAIL.COM",
                            NormalizedUserName = "TIAGO_VARANDAS@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELNkMdIrt7kMwhD7j07xYCyWPKlgaLBmuKVAPhMoirTkdtlHghML183wzI5u6NWEJQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d5df9c2e-e2c7-4986-91f5-c38a7cc242e4",
                            TwoFactorEnabled = false,
                            UserName = "tiago_varandas@gmail.com"
                        },
                        new
                        {
                            Id = "c1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "68a1f2be-4459-4ef3-bf7b-03c2456d8ce6",
                            DataRegisto = new DateTime(2023, 2, 13, 14, 10, 0, 435, DateTimeKind.Local).AddTicks(8516),
                            Email = "alberto@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NomeUtilizador = "Alberto Santos",
                            NormalizedEmail = "ALBERTO@HOTMAIL.COM",
                            NormalizedUserName = "ALBERTO@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELNkMdIrt7kMwhD7j07xYCyWPKlgaLBmuKVAPhMoirTkdtlHghML183wzI5u6NWEJQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4910fbb9-9c0d-4283-90c4-70243b5d5628",
                            TwoFactorEnabled = false,
                            UserName = "alberto@hotmail.com"
                        },
                        new
                        {
                            Id = "c2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "22343c87-6f9a-464d-a61d-fa17bcf580c6",
                            DataRegisto = new DateTime(2023, 5, 9, 17, 59, 0, 435, DateTimeKind.Local).AddTicks(8516),
                            Email = "maria.joao@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NomeUtilizador = "Maria João",
                            NormalizedEmail = "MARIA.JOAO@HOTMAIL.COM",
                            NormalizedUserName = "MARIA.JOAO@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELNkMdIrt7kMwhD7j07xYCyWPKlgaLBmuKVAPhMoirTkdtlHghML183wzI5u6NWEJQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7eb6a2ee-30f5-4fa9-8f27-296d9cc799cb",
                            TwoFactorEnabled = false,
                            UserName = "maria.joao@hotmail.com"
                        },
                        new
                        {
                            Id = "c3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3ddb906a-0146-407c-ab20-fbe62c07be24",
                            DataRegisto = new DateTime(2023, 6, 23, 12, 40, 0, 435, DateTimeKind.Local).AddTicks(8516),
                            Email = "catarina@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NomeUtilizador = "Catarina Moedas",
                            NormalizedEmail = "CATARINA@HOTMAIL.COM",
                            NormalizedUserName = "CATARINA@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELNkMdIrt7kMwhD7j07xYCyWPKlgaLBmuKVAPhMoirTkdtlHghML183wzI5u6NWEJQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "71220dd4-1692-453e-9f27-b98488b79bc8",
                            TwoFactorEnabled = false,
                            UserName = "catarina@hotmail.com"
                        },
                        new
                        {
                            Id = "c4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "45db5786-8815-412a-94f5-42cd05a7b851",
                            DataRegisto = new DateTime(2023, 3, 30, 9, 30, 0, 435, DateTimeKind.Local).AddTicks(8516),
                            Email = "gustavo_pal@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NomeUtilizador = "Gustavo Palhinha",
                            NormalizedEmail = "GUSTAVO_PAL@HOTMAIL.COM",
                            NormalizedUserName = "GUSTAVO_PAL@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELNkMdIrt7kMwhD7j07xYCyWPKlgaLBmuKVAPhMoirTkdtlHghML183wzI5u6NWEJQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c2010eea-80c6-4f6f-95aa-c1600a0566e1",
                            TwoFactorEnabled = false,
                            UserName = "gustavo_pal@hotmail.com"
                        });
                });

            modelBuilder.Entity("DevWeb_Trab_Final.Models.Clientes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CodPostal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Morada")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NIF")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telemovel")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clientes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CodPostal = "2500-654 PORTIMÃO",
                            Email = "alberto@hotmail.com",
                            Morada = "Bairo Rui Lopes",
                            NIF = 249249249,
                            Nome = "Alberto Santos",
                            Telemovel = "969777666",
                            UserId = "c1"
                        },
                        new
                        {
                            Id = 2,
                            CodPostal = "2678-283 LISBOA",
                            Email = "maria.joao@hotmail.com",
                            Morada = "Canto da Cerejeiras",
                            NIF = 256249999,
                            Nome = "Maria João",
                            Telemovel = "933751916",
                            UserId = "c2"
                        },
                        new
                        {
                            Id = 3,
                            CodPostal = "1672-123 AVEIRO",
                            Email = "catarina@hotmail.com",
                            Morada = "Rua Salvador Sobral",
                            NIF = 189234831,
                            Nome = "Catarina Moedas",
                            Telemovel = "919744531",
                            UserId = "c3"
                        },
                        new
                        {
                            Id = 4,
                            CodPostal = "3111-879 CASAIS",
                            Email = "gustavo_pal@hotmail.com",
                            Morada = "Placeta dos Santos Simões",
                            NIF = 222738901,
                            Nome = "Gustavo Palhinha",
                            Telemovel = "923321348",
                            UserId = "c4"
                        });
                });

            modelBuilder.Entity("DevWeb_Trab_Final.Models.Dispositivos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClienteFK")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataReg")
                        .HasColumnType("datetime2");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClienteFK");

                    b.ToTable("Dispositivos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClienteFK = 1,
                            DataReg = new DateTime(2023, 2, 13, 14, 20, 48, 435, DateTimeKind.Local).AddTicks(8516),
                            Estado = "Ecrã Partido",
                            Modelo = "Asus",
                            Tipo = "PC-Alberto"
                        },
                        new
                        {
                            Id = 2,
                            ClienteFK = 2,
                            DataReg = new DateTime(2023, 5, 9, 18, 10, 14, 435, DateTimeKind.Local).AddTicks(8516),
                            Estado = "Não liga",
                            Modelo = "Samsung",
                            Tipo = "MicroOndas-Maria"
                        },
                        new
                        {
                            Id = 3,
                            ClienteFK = 2,
                            DataReg = new DateTime(2023, 7, 9, 20, 17, 13, 785, DateTimeKind.Local).AddTicks(4577),
                            Estado = "Não faz chamadas",
                            Modelo = "Xiaomi",
                            Tipo = "Telemovel-Maria"
                        },
                        new
                        {
                            Id = 4,
                            ClienteFK = 3,
                            DataReg = new DateTime(2023, 6, 23, 12, 50, 22, 435, DateTimeKind.Local).AddTicks(8516),
                            Estado = "Tem virus",
                            Modelo = "Apple",
                            Tipo = "Tablet-Catarina"
                        },
                        new
                        {
                            Id = 5,
                            ClienteFK = 4,
                            DataReg = new DateTime(2023, 3, 30, 9, 35, 34, 435, DateTimeKind.Local).AddTicks(8516),
                            Estado = "Não deixa mudar as horas",
                            Modelo = "Sony",
                            Tipo = "Relogio-Gustavo"
                        },
                        new
                        {
                            Id = 6,
                            ClienteFK = 4,
                            DataReg = new DateTime(2023, 7, 9, 14, 55, 44, 435, DateTimeKind.Local).AddTicks(8516),
                            Estado = "Bateria quase a rebentar",
                            Modelo = "HP",
                            Tipo = "Portatil-Gustavo"
                        },
                        new
                        {
                            Id = 7,
                            ClienteFK = 1,
                            DataReg = new DateTime(2023, 4, 4, 10, 20, 33, 435, DateTimeKind.Local).AddTicks(8516),
                            Estado = "Não vira",
                            Modelo = "Wahson",
                            Tipo = "Ventoinha-Alberto"
                        });
                });

            modelBuilder.Entity("DevWeb_Trab_Final.Models.Fotografias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DispositivoFK")
                        .HasColumnType("int");

                    b.Property<string>("NomeFoto")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DispositivoFK");

                    b.ToTable("Fotografias");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DispositivoFK = 1,
                            NomeFoto = "noDispositivo.png"
                        },
                        new
                        {
                            Id = 2,
                            DispositivoFK = 2,
                            NomeFoto = "noDispositivo.png"
                        },
                        new
                        {
                            Id = 3,
                            DispositivoFK = 3,
                            NomeFoto = "noDispositivo.png"
                        },
                        new
                        {
                            Id = 4,
                            DispositivoFK = 4,
                            NomeFoto = "noDispositivo.png"
                        },
                        new
                        {
                            Id = 5,
                            DispositivoFK = 5,
                            NomeFoto = "noDispositivo.png"
                        },
                        new
                        {
                            Id = 6,
                            DispositivoFK = 6,
                            NomeFoto = "noDispositivo.png"
                        },
                        new
                        {
                            Id = 7,
                            DispositivoFK = 7,
                            NomeFoto = "noDispositivo.png"
                        });
                });

            modelBuilder.Entity("DevWeb_Trab_Final.Models.Funcionarios", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CodPostal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Especializacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Morada")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telemovel")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Funcionarios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CodPostal = "2300-450 TRAMAGAL",
                            Email = "daniel@gmail.com",
                            Especializacao = "Computadores",
                            Morada = "Rua da Pedrada",
                            Nome = "Daniel Filipe",
                            Telemovel = "912123123",
                            UserId = "f1"
                        },
                        new
                        {
                            Id = 2,
                            CodPostal = "2305-670 ALBUFEIRA",
                            Email = "rodrigo@gmail.com",
                            Especializacao = "Computadores",
                            Morada = "Rua do Pinheiro",
                            Nome = "Rodrigo Antunes",
                            Telemovel = "915789789",
                            UserId = "f2"
                        },
                        new
                        {
                            Id = 3,
                            CodPostal = "2200-301 BRAGA",
                            Email = "leia.marques@gmail.com",
                            Especializacao = "Telemóveis",
                            Morada = "Avenida 31 de Outubro",
                            Nome = "Leia Marques",
                            Telemovel = "962231123",
                            UserId = "f3"
                        },
                        new
                        {
                            Id = 4,
                            CodPostal = "2731-659 BEJA",
                            Email = "carlos@gmail.com",
                            Especializacao = "Eletrodomésticos",
                            Morada = "Praça da Nogueira",
                            Nome = "Carlos Tomaz",
                            Telemovel = "932553923",
                            UserId = "f4"
                        },
                        new
                        {
                            Id = 5,
                            CodPostal = "3030-155 SAGRES",
                            Email = "tiago_varandas@gmail.com",
                            Especializacao = "Tablets",
                            Morada = "Praia de Lagos",
                            Nome = "Tiago Roberto Varandas",
                            Telemovel = "922456123",
                            UserId = "f5"
                        });
                });

            modelBuilder.Entity("DevWeb_Trab_Final.Models.Reparacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Custo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("DataFim")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("datetime2");

                    b.Property<int>("DispositivoFK")
                        .HasColumnType("int");

                    b.Property<int>("FuncionariosFK")
                        .HasColumnType("int");

                    b.Property<string>("Observacao")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("DispositivoFK");

                    b.HasIndex("FuncionariosFK");

                    b.ToTable("Reparacao");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Custo = 80.35m,
                            DataInicio = new DateTime(2023, 7, 9, 20, 17, 13, 785, DateTimeKind.Local).AddTicks(4691),
                            DispositivoFK = 1,
                            FuncionariosFK = 1,
                            Observacao = "É preciso comprar um ecrã novo"
                        },
                        new
                        {
                            Id = 2,
                            Custo = 50.43m,
                            DataInicio = new DateTime(2023, 5, 9, 18, 15, 44, 435, DateTimeKind.Local).AddTicks(8516),
                            DispositivoFK = 2,
                            FuncionariosFK = 2,
                            Observacao = "É preciso trocar a fonte de alimentação"
                        },
                        new
                        {
                            Id = 3,
                            Custo = 7.52m,
                            DataInicio = new DateTime(2023, 5, 10, 19, 55, 59, 435, DateTimeKind.Local).AddTicks(8516),
                            DispositivoFK = 2,
                            FuncionariosFK = 4,
                            Observacao = "É tambem preciso arranjar o cabo de alimentação"
                        },
                        new
                        {
                            Id = 4,
                            Custo = 10.67m,
                            DataInicio = new DateTime(2023, 7, 9, 20, 17, 13, 785, DateTimeKind.Local).AddTicks(4706),
                            DispositivoFK = 3,
                            FuncionariosFK = 4,
                            Observacao = "É preciso mudar a antena"
                        },
                        new
                        {
                            Id = 5,
                            Custo = 20.20m,
                            DataInicio = new DateTime(2023, 6, 24, 11, 28, 23, 435, DateTimeKind.Local).AddTicks(8516),
                            DispositivoFK = 4,
                            FuncionariosFK = 3,
                            Observacao = "Tentar meter um antivírus"
                        },
                        new
                        {
                            Id = 6,
                            Custo = 40.00m,
                            DataInicio = new DateTime(2023, 6, 25, 18, 48, 24, 435, DateTimeKind.Local).AddTicks(8516),
                            DispositivoFK = 4,
                            FuncionariosFK = 5,
                            Observacao = "É preciso formatar o tablet"
                        },
                        new
                        {
                            Id = 7,
                            Custo = 8.90m,
                            DataInicio = new DateTime(2023, 7, 11, 16, 30, 33, 435, DateTimeKind.Local).AddTicks(8516),
                            DispositivoFK = 5,
                            FuncionariosFK = 4,
                            Observacao = "É preciso mudar os botões"
                        },
                        new
                        {
                            Id = 8,
                            Custo = 50.77m,
                            DataInicio = new DateTime(2023, 7, 9, 15, 0, 12, 435, DateTimeKind.Local).AddTicks(8516),
                            DispositivoFK = 6,
                            FuncionariosFK = 3,
                            Observacao = "É preciso encomendar uma bateria nova"
                        },
                        new
                        {
                            Id = 9,
                            Custo = 10.00m,
                            DataFim = new DateTime(2023, 2, 17, 14, 30, 11, 435, DateTimeKind.Local).AddTicks(8516),
                            DataInicio = new DateTime(2023, 2, 15, 13, 45, 51, 435, DateTimeKind.Local).AddTicks(8516),
                            DispositivoFK = 1,
                            FuncionariosFK = 5,
                            Observacao = "Arranjado"
                        },
                        new
                        {
                            Id = 10,
                            Custo = 20.30m,
                            DataFim = new DateTime(2023, 7, 9, 20, 17, 13, 785, DateTimeKind.Local).AddTicks(4722),
                            DataInicio = new DateTime(2023, 7, 12, 14, 25, 20, 435, DateTimeKind.Local).AddTicks(8516),
                            DispositivoFK = 3,
                            FuncionariosFK = 5,
                            Observacao = "Arranjado"
                        },
                        new
                        {
                            Id = 11,
                            Custo = 60.78m,
                            DataFim = new DateTime(2023, 4, 1, 11, 33, 17, 435, DateTimeKind.Local).AddTicks(8516),
                            DataInicio = new DateTime(2023, 3, 30, 9, 50, 50, 435, DateTimeKind.Local).AddTicks(8516),
                            DispositivoFK = 5,
                            FuncionariosFK = 2,
                            Observacao = "Arranjado"
                        },
                        new
                        {
                            Id = 12,
                            Custo = 60.78m,
                            DataFim = new DateTime(2023, 4, 5, 17, 50, 25, 435, DateTimeKind.Local).AddTicks(8516),
                            DataInicio = new DateTime(2023, 4, 4, 10, 30, 34, 435, DateTimeKind.Local).AddTicks(8516),
                            DispositivoFK = 7,
                            FuncionariosFK = 4,
                            Observacao = "Arranjado"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a",
                            Name = "Administrador",
                            NormalizedName = "ADMINISTRADOR"
                        },
                        new
                        {
                            Id = "f",
                            Name = "Funcionario",
                            NormalizedName = "FUNCIONARIO"
                        },
                        new
                        {
                            Id = "c",
                            Name = "Cliente",
                            NormalizedName = "CLIENTE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "a1",
                            RoleId = "a"
                        },
                        new
                        {
                            UserId = "a2",
                            RoleId = "a"
                        },
                        new
                        {
                            UserId = "f1",
                            RoleId = "f"
                        },
                        new
                        {
                            UserId = "f2",
                            RoleId = "f"
                        },
                        new
                        {
                            UserId = "f3",
                            RoleId = "f"
                        },
                        new
                        {
                            UserId = "f4",
                            RoleId = "f"
                        },
                        new
                        {
                            UserId = "f5",
                            RoleId = "f"
                        },
                        new
                        {
                            UserId = "c1",
                            RoleId = "c"
                        },
                        new
                        {
                            UserId = "c2",
                            RoleId = "c"
                        },
                        new
                        {
                            UserId = "c3",
                            RoleId = "c"
                        },
                        new
                        {
                            UserId = "c4",
                            RoleId = "c"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DevWeb_Trab_Final.Models.Dispositivos", b =>
                {
                    b.HasOne("DevWeb_Trab_Final.Models.Clientes", "Cliente")
                        .WithMany("ListaDipositivos")
                        .HasForeignKey("ClienteFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("DevWeb_Trab_Final.Models.Fotografias", b =>
                {
                    b.HasOne("DevWeb_Trab_Final.Models.Dispositivos", "Dispositivo")
                        .WithMany("ListaFotografias")
                        .HasForeignKey("DispositivoFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dispositivo");
                });

            modelBuilder.Entity("DevWeb_Trab_Final.Models.Reparacao", b =>
                {
                    b.HasOne("DevWeb_Trab_Final.Models.Dispositivos", "Dispositivo")
                        .WithMany("ListaReparacao")
                        .HasForeignKey("DispositivoFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevWeb_Trab_Final.Models.Funcionarios", "Funcionarios")
                        .WithMany("ListaRepara")
                        .HasForeignKey("FuncionariosFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dispositivo");

                    b.Navigation("Funcionarios");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DevWeb_Trab_Final.Data.DevWeb_Trab_Final_User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DevWeb_Trab_Final.Data.DevWeb_Trab_Final_User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevWeb_Trab_Final.Data.DevWeb_Trab_Final_User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DevWeb_Trab_Final.Data.DevWeb_Trab_Final_User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevWeb_Trab_Final.Models.Clientes", b =>
                {
                    b.Navigation("ListaDipositivos");
                });

            modelBuilder.Entity("DevWeb_Trab_Final.Models.Dispositivos", b =>
                {
                    b.Navigation("ListaFotografias");

                    b.Navigation("ListaReparacao");
                });

            modelBuilder.Entity("DevWeb_Trab_Final.Models.Funcionarios", b =>
                {
                    b.Navigation("ListaRepara");
                });
#pragma warning restore 612, 618
        }
    }
}
